#!/bin/bash

set -ex

. .env

readonly TEMPLATE_GIT_REPO=$( \
  [ ! -z "$MYJAM_TEMPLATE_GIT_REPO" ] \
    && echo "$MYJAM_TEMPLATE_GIT_REPO" \
    || echo "https://github.com/my-jam-store/myjam-nextjs.git" \
)

readonly TEMPLATE_GIT_BRANCH=$( \
  [ ! -z "$MYJAM_TEMPLATE_GIT_BRANCH" ] \
    && echo "$MYJAM_TEMPLATE_GIT_BRANCH" \
    || echo "store-maker-template" \
)

readonly TEMPLATE_TEMP_GIT_BRANCH=$( \
  [ ! -z "$MYJAM_TEMPLATE_TEMP_GIT_BRANCH" ] \
    && echo "$MYJAM_TEMPLATE_TEMP_GIT_BRANCH" \
    || echo "store-maker-temporary-local-branch" \
)

readonly GITHUB_USER_URL=$( \
  [ ! -z "$MYJAM_IS_GITHUB_ORG" ] && [ "$MYJAM_IS_GITHUB_ORG" -eq "1" ] \
    && echo "https://api.github.com/orgs/${$MYJAM_GITHUB_USER}/repos" \
    || echo "https://api.github.com/user/repos" \
)

readonly VERCEL_TEAM=$( \
  [ ! -z "$MYJAM_VERCEL_TEAM_ID" ] \
    && echo "?teamId=${MYJAM_VERCEL_TEAM_ID}" \
    || echo "" \
)

readonly VERCEL_PROJECT_OUTPUT_DIRECTORY=$( \
  [ ! -z "$MYJAM_VERCEL_PROJECT_OUTPUT_DIRECTORY" ] \
    && echo "$MYJAM_VERCEL_PROJECT_OUTPUT_DIRECTORY" \
    || echo "build" \
)

PROJECT=""

github_repo_payload() {
  echo $(cat <<JSON
  {
    "name": "$PROJECT",
    "private": "true",
    "has_issues": "false",
    "has_projects": "false",
    "has_wiki": "false",
    "allow_squash_merge": "false",
    "allow_merge_commit": "false"
  }
JSON
)
}

vercel_project_payload() {
  echo $(cat <<JSON
  {
    "name": "$PROJECT",
    "gitRepository": { "type": "github", "repo": "${MYJAM_GITHUB_USER}/${PROJECT}" }
  }
JSON
)
}

vercel_env_data() {
  local type="$1"
  local key="$2"
  local value="$3"

  echo $(cat <<JSON
  {
    "type": "$type",
    "key": "$key",
    "value": "$value",
    "target": [
      "production",
      "preview",
      "development"
    ]
  }
JSON
)
}

next_public_app_url_env() {
  vercel_env_data "plain" "NEXT_PUBLIC_APP_URL" "https://${PROJECT}.vercel.app/"
}

next_public_api_url_env() {
  vercel_env_data "plain" "NEXT_PUBLIC_API_URL" "https://${PROJECT}.vercel.app/api"
}

next_public_cloudinary_path_env() {
  vercel_env_data "encrypted" "NEXT_PUBLIC_CLOUDINARY_PATH" "$MYJAM_NEXT_PUBLIC_CLOUDINARY_PATH"
}

next_public_cloudinary_key_env() {
  vercel_env_data "encrypted" "NEXT_PUBLIC_CLOUDINARY_KEY" "$MYJAM_NEXT_PUBLIC_CLOUDINARY_KEY"
}

next_public_algolia_search_key_env() {
  vercel_env_data "encrypted" "NEXT_PUBLIC_ALGOLIA_SEARCH_KEY" "$MYJAM_NEXT_PUBLIC_ALGOLIA_SEARCH_KEY"
}

next_public_algolia_index_name_env() {
  vercel_env_data "plain" "NEXT_PUBLIC_ALGOLIA_INDEX_NAME" "$MYJAM_NEXT_PUBLIC_ALGOLIA_INDEX_NAME"
}

next_public_algolia_app_id_env() {
  vercel_env_data "encrypted" "NEXT_PUBLIC_ALGOLIA_APP_ID" "$MYJAM_NEXT_PUBLIC_ALGOLIA_APP_ID"
}

stripe_success_url_path_env() {
  vercel_env_data "plain" "STRIPE_SUCCESS_URL_PATH" "$MYJAM_STRIPE_SUCCESS_URL_PATH"
}

stripe_shipping_fee_id_env() {
  vercel_env_data "encrypted" "STRIPE_SHIPPING_FEE_ID" "$MYJAM_STRIPE_SHIPPING_FEE_ID"
}

stripe_shipping_fee_enabled_env() {
  vercel_env_data "plain" "STRIPE_SHIPPING_FEE_ENABLED" "$MYJAM_STRIPE_SHIPPING_FEE_ENABLED"
}

stripe_shipping_address_allowed_countries_env() {
  vercel_env_data \
    "plain" \
    "STRIPE_SHIPPING_ADDRESS_ALLOWED_COUNTRIES" \
    "$MYJAM_STRIPE_SHIPPING_ADDRESS_ALLOWED_COUNTRIES"
}

stripe_promotion_codes_enabled_env() {
  vercel_env_data "plain" "STRIPE_PROMOTION_CODES_ENABLED" "$MYJAM_STRIPE_PROMOTION_CODES_ENABLED"
}

stripe_payment_method_types_env() {
  vercel_env_data "plain" "STRIPE_PAYMENT_METHOD_TYPES" "$MYJAM_STRIPE_PAYMENT_METHOD_TYPES"
}

stripe_payment_intent_capture_method_env() {
  vercel_env_data \
    "plain" \
    "STRIPE_PAYMENT_INTENT_CAPTURE_METHOD" \
    "$MYJAM_STRIPE_PAYMENT_INTENT_CAPTURE_METHOD"
}

stripe_free_shipping_id_env() {
  vercel_env_data "encrypted" "STRIPE_FREE_SHIPPING_ID" "$MYJAM_STRIPE_FREE_SHIPPING_ID"
}

stripe_domain_env() {
  vercel_env_data "plain" "STRIPE_DOMAIN" "https://${PROJECT}.vercel.app"
}

stripe_currency_env() {
  vercel_env_data "plain" "STRIPE_CURRENCY" "$MYJAM_STRIPE_CURRENCY"
}

stripe_currency_env() {
  vercel_env_data \
    "encrypted" \
    "STRIPE_CHECKOUT_SESSION_COMPLETED_WEBHOOK_SECRET" \
    "$MYJAM_STRIPE_CHECKOUT_SESSION_COMPLETED_WEBHOOK_SECRET"
}

stripe_cancel_url_path_env() {
  vercel_env_data "plain" "STRIPE_CANCEL_URL_PATH" "$MYJAM_STRIPE_CANCEL_URL_PATH"
}

stripe_api_secret_key_env() {
  vercel_env_data "encrypted" "STRIPE_API_SECRET_KEY" "$MYJAM_STRIPE_API_SECRET_KEY"
}

checkout_order_create_enabled_env() {
  vercel_env_data "plain" "CHECKOUT_ORDER_CREATE_ENABLED" "$MYJAM_CHECKOUT_ORDER_CREATE_ENABLED"
}

checkout_airtable_base_id_env() {
  vercel_env_data "encrypted" "CHECKOUT_AIRTABLE_BASE_ID" "$MYJAM_CHECKOUT_AIRTABLE_BASE_ID"
}

catalog_airtable_base_id_env() {
  vercel_env_data "encrypted" "CATALOG_AIRTABLE_BASE_ID" "$MYJAM_CATALOG_AIRTABLE_BASE_ID"
}

airtable_api_key_env() {
  vercel_env_data "encrypted" "AIRTABLE_API_KEY" "$MYJAM_AIRTABLE_API_KEY"
}

create_github_repo() {
  local repo_payload=$(github_repo_payload)

  curl \
    -X POST \
    -H "Accept: application/vnd.github.v3+json" \
    -H "Authorization: token $MYJAM_GITHUB_TOKEN" \
    "$GITHUB_USER_URL" \
    -d "$repo_payload"
}

configure_vercel_project() {
  curl -X PATCH \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $MYJAM_VERCEL_TOKEN" \
    "https://api.vercel.com/v2/projects/$PROJECT$VERCEL_TEAM" \
    -d '{ "framework": "nextjs", "outputDirectory": "'"$VERCEL_PROJECT_OUTPUT_DIRECTORY"'" }'
}

add_vercel_env_var() {
  local env_data="$1"
  local vercel_project_id="$2"

  curl -X POST \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer ${MYJAM_VERCEL_TOKEN}" \
    "https://api.vercel.com/v8/projects/${vercel_project_id}/env${VERCEL_TEAM}" \
    -d "$env_data"
}

create_vercel_project() {
  local project_payload=$(vercel_project_payload)

  local project_data=$( \
    curl -X POST \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $MYJAM_VERCEL_TOKEN" \
    "https://api.vercel.com/v6/projects/${VERCEL_TEAM}" \
    -d "$project_payload" \
  )

  local project_id=$( \
    echo "$project_data" | sed -e 's/.*"id":"\(.*\)","installCommand".*/\1/' \
  )

  configure_vercel_project

  add_vercel_env_var "$(next_public_app_url_env)" "$project_id"
  add_vercel_env_var "$(next_public_api_url_env)" "$project_id"
  add_vercel_env_var "$(next_public_cloudinary_path_env)" "$project_id"
  add_vercel_env_var "$(next_public_cloudinary_key_env)" "$project_id"
  add_vercel_env_var "$(next_public_algolia_search_key_env)" "$project_id"
  add_vercel_env_var "$(next_public_algolia_index_name_env)" "$project_id"
  add_vercel_env_var "$(next_public_algolia_app_id_env)" "$project_id"
  add_vercel_env_var "$(stripe_success_url_path_env)" "$project_id"
  add_vercel_env_var "$(stripe_shipping_fee_id_env)" "$project_id"
  add_vercel_env_var "$(stripe_shipping_fee_enabled_env)" "$project_id"
  add_vercel_env_var "$(stripe_shipping_address_allowed_countries_env)" "$project_id"
  add_vercel_env_var "$(stripe_promotion_codes_enabled_env)" "$project_id"
  add_vercel_env_var "$(stripe_payment_method_types_env)" "$project_id"
  add_vercel_env_var "$(stripe_payment_intent_capture_method_env)" "$project_id"
  add_vercel_env_var "$(stripe_free_shipping_id_env)" "$project_id"
  add_vercel_env_var "$(stripe_domain_env)" "$project_id"
  add_vercel_env_var "$(stripe_currency_env)" "$project_id"
  add_vercel_env_var "$(stripe_checkout_session_completed_webhook_secret_env)" "$project_id"
  add_vercel_env_var "$(stripe_cancel_url_path_env)" "$project_id"
  add_vercel_env_var "$(stripe_api_secret_key_env)" "$project_id"
  add_vercel_env_var "$(checkout_order_create_enabled_env)" "$project_id"
  add_vercel_env_var "$(checkout_airtable_base_id_env)" "$project_id"
  add_vercel_env_var "$(catalog_airtable_base_id_env)" "$project_id"
  add_vercel_env_var "$(airtable_api_key_env)" "$project_id"
}

deploy_vercel_project() {
  if [ -d "../template" ]; then
    cd ../template

    git checkout -b "$TEMPLATE_TEMP_GIT_BRANCH"
    git branch -D "$TEMPLATE_GIT_BRANCH"
    git checkout "$TEMPLATE_GIT_BRANCH"
    git pull origin "$TEMPLATE_GIT_BRANCH"
    git branch -D "$TEMPLATE_TEMP_GIT_BRANCH"
  else
    git clone "$TEMPLATE_GIT_REPO" --branch="$TEMPLATE_GIT_BRANCH" ../template
    cd ../template
  fi

  rm -f README.md
  echo "$PROJECT" > README.md

  git add README.md
  git commit -am "$PROJECT"
  git push --mirror "git@github.com:${MYJAM_GITHUB_USER}/${PROJECT}.git"
}

read_args() {
  local i

  if [ $# -eq 0 ]; then
    usage
  fi

  for i in "$@"
  do
    case $i in
      --store-name=*)    PROJECT="${i#*=}";;
      *)                 usage;;
    esac
  done

  args_validation
}

args_validation() {
  if [ -z "$PROJECT" ]; then
    error "Store name is missing."
  fi
}

error() {
  echo -e >&2 "\n$1\n"
  exit 1
}

usage() {
  cat <<Usage

usage: ./store-maker --store-name=<store-name>

  --store-name
      The name that will be used for Vercel project and GitHub repository names.

Usage

  exit 0
}

main() {
  read_args "$@"
  create_github_repo
  create_vercel_project
  deploy_vercel_project
}

main "$@"
